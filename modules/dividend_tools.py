import streamlit as st
import pandas as pd
from datetime import datetime
from config import DEFAULT_ANNUAL_GOAL
from modules.stock_data import get_dividends  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏à‡∏≤‡∏Å yfinance
from visualization import plot_dividend_progress  # ‡πÉ‡∏ä‡πâ gauge ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

# -------------------------------------------------
# Utility / Cache Layer
# -------------------------------------------------
@st.cache_data(show_spinner=False, ttl=60 * 30)  # cache 30 ‡∏ô‡∏≤‡∏ó‡∏µ
def load_dividend_history(symbol: str) -> pd.DataFrame:
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß (‡πÉ‡∏ä‡πâ cache)
    ‡∏Ñ‡∏∑‡∏ô DataFrame ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: Date, Dividend, Year, Month
    """
    df = get_dividends(symbol)
    if df is None or df.empty:
        return pd.DataFrame(columns=["Date", "Dividend", "Year", "Month"])
    return df

def format_money(v):
    try:
        return f"{v:,.2f}"
    except Exception:
        return "-"

# -------------------------------------------------
# Dashboard Dividend Summary
# -------------------------------------------------
def summary_dividend_chart(portfolio_df: pd.DataFrame, goal_amount: float = DEFAULT_ANNUAL_GOAL):
    st.subheader("üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏õ‡∏µ")

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï
    if portfolio_df is None or portfolio_df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return

    required_cols = {"symbol", "quantity", "avg_price"}
    if not required_cols.issubset(portfolio_df.columns):
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {required_cols - set(portfolio_df.columns)}")
        return

    dividend_rows = []
    total_dividend_baht = 0.0

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ô‡∏ú‡∏•..."):
        for _, row in portfolio_df.iterrows():
            symbol = str(row["symbol"]).strip()
            quantity = float(row.get("quantity", 0) or 0)
            avg_price = float(row.get("avg_price", 0) or 0)

            if not symbol:
                continue

            div_df = load_dividend_history(symbol)

            if div_df.empty:
                # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ô‡∏ú‡∏• (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô continue)
                dividend_rows.append({
                    "‡∏´‡∏∏‡πâ‡∏ô": symbol,
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": quantity,
                    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": avg_price,
                    "‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•/‡∏´‡∏∏‡πâ‡∏ô (‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)": 0.0,
                    "‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏ô‡∏ú‡∏• (‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô)": 0.0,
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≠‡∏õ‡∏µ (%)": 0.0,
                    "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)": "-"
                })
                continue

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            latest_year = div_df["Year"].max()
            latest_year_df = div_df[div_df["Year"] == latest_year]

            annual_div_per_share = latest_year_df["Dividend"].sum()
            est_total = annual_div_per_share * quantity
            yield_percent = (annual_div_per_share / avg_price * 100) if avg_price > 0 else 0.0

            total_dividend_baht += est_total

            # ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
            items_desc = ", ".join(
                latest_year_df.sort_values("Date")["Dividend"].apply(lambda x: f"{x:.2f}").tolist()
            )

            dividend_rows.append({
                "‡∏´‡∏∏‡πâ‡∏ô": symbol,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": quantity,
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": round(avg_price, 2),
                "‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•/‡∏´‡∏∏‡πâ‡∏ô (‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)": round(annual_div_per_share, 3),
                "‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏ô‡∏ú‡∏• (‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô)": round(est_total, 2),
                "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≠‡∏õ‡∏µ (%)": round(yield_percent, 2),
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)": items_desc if items_desc else "-"
            })

    if dividend_rows:
        df_show = pd.DataFrame(dividend_rows)
        st.dataframe(df_show, use_container_width=True)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏•‡∏¢")

    fig = plot_dividend_progress(total_dividend_baht, goal=goal_amount)
    st.plotly_chart(fig, use_container_width=True)

    st.markdown(
        f"üí∞ ‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô): "
        f"**{format_money(total_dividend_baht)} ‡∏ö‡∏≤‡∏ó**  | üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {format_money(goal_amount)}"
    )

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠‡∏¢
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï", len(portfolio_df))
    with col2:
        st.metric("‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ô‡∏ú‡∏•", sum(1 for r in dividend_rows if r['‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•/‡∏´‡∏∏‡πâ‡∏ô (‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)'] > 0))
    with col3:
        progress_pct = (total_dividend_baht / goal_amount * 100) if goal_amount > 0 else 0
        st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (%)", f"{progress_pct:.2f}%")

# -------------------------------------------------
# DCA Calculator (‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
# -------------------------------------------------
def dca_calculator():
    st.title("üßÆ DCA Calculator")

    st.markdown("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ñ‡∏±‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô (Dollar-Cost Averaging) ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö")

    symbol = st.text_input("‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô PTT, ADVANC)").strip().upper()
    current_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=0.0, step=0.01)
    invest_per_period = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=1000.0, step=100.0)
    freq_label = st.selectbox("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà", ["‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (12x)", "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (52x)", "‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ (4x)", "‡∏õ‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (1x)"])
    freq_map = {
        "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (12x)": 12,
        "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (52x)": 52,
        "‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ (4x)": 4,
        "‡∏õ‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (1x)": 1
    }
    periods = freq_map[freq_label]

    use_latest_div = st.checkbox("‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏ô‡∏ú‡∏•/‡∏´‡∏∏‡πâ‡∏ô ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", value=True)
    manual_div = st.number_input("‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡πÄ‡∏≠‡∏á (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=0.0, step=0.01)

    if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
        if not symbol:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô")
            return
        if current_price <= 0:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô > 0")
            return
        if invest_per_period <= 0:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô > 0")
            return

        shares_per_period = invest_per_period / current_price
        total_shares_1y = shares_per_period * periods
        total_cost_1y = invest_per_period * periods

        annual_div_per_share = 0.0
        if use_latest_div:
            div_df = load_dividend_history(symbol)
            if not div_df.empty:
                latest_year = div_df["Year"].max()
                annual_div_per_share = div_df[div_df["Year"] == latest_year]["Dividend"].sum()
        if annual_div_per_share == 0 and manual_div > 0:
            annual_div_per_share = manual_div

        est_div_income_after_1y = total_shares_1y * annual_div_per_share
        forward_yield = (annual_div_per_share / current_price * 100) if current_price > 0 and annual_div_per_share > 0 else 0
        effective_yield_on_cost = (est_div_income_after_1y / total_cost_1y * 100) if total_cost_1y > 0 and est_div_income_after_1y > 0 else 0

        st.markdown("### ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        st.write(f"- ‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì): **{shares_per_period:.4f} ‡∏´‡∏∏‡πâ‡∏ô**")
        st.write(f"- ‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏´‡∏•‡∏±‡∏á 1 ‡∏õ‡∏µ: **{total_shares_1y:.4f} ‡∏´‡∏∏‡πâ‡∏ô**")
        st.write(f"- ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° 1 ‡∏õ‡∏µ: **{format_money(total_cost_1y)} ‡∏ö‡∏≤‡∏ó**")
        st.write(f"- ‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡∏õ‡∏µ): **{annual_div_per_share:.3f} ‡∏ö‡∏≤‡∏ó**")
        st.write(f"- ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏á 1 ‡∏õ‡∏µ: **{format_money(est_div_income_after_1y)} ‡∏ö‡∏≤‡∏ó**")
        st.write(f"- Forward Yield (‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô): **{forward_yield:.2f}%**")
        st.write(f"- ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏õ‡∏µ‡πÅ‡∏£‡∏Å: **{effective_yield_on_cost:.2f}%**")

        st.info("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï")

# -------------------------------------------------
# (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° debug
# -------------------------------------------------
def debug_dividend(symbol: str):
    st.write(f"DEBUG: {symbol}")
    df = load_dividend_history(symbol)
    st.write(df.head())
