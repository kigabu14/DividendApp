import streamlit as st
import pandas as pd

from config import DEFAULT_ANNUAL_GOAL
from modules.stock_data import get_dividends
from visualization import plot_dividend_progress


def summary_dividend_chart(portfolio_df: pd.DataFrame, goal_amount: float | None = None):
    """
    ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô
    :param portfolio_df: DataFrame ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå symbol, quantity, avg_price
    :param goal_amount: ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ (‡∏ö‡∏≤‡∏ó). ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ä‡πâ DEFAULT_ANNUAL_GOAL
    """
    if goal_amount is None:
        goal_amount = DEFAULT_ANNUAL_GOAL

    st.subheader("üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏õ‡∏µ")

    required_cols = {"symbol", "quantity", "avg_price"}
    missing = required_cols - set(portfolio_df.columns)
    if missing:
        st.error(f"‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {', '.join(missing)}")
        return

    dividend_data = []
    total_div = 0.0

    for _, row in portfolio_df.iterrows():
        symbol = row["symbol"]
        quantity = row["quantity"]
        avg_price = row["avg_price"]

        dividends_df = get_dividends(symbol)
        if dividends_df.empty:
            continue

        # ‡∏£‡∏ß‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ‡∏ï‡πà‡∏≠ 1 ‡∏´‡∏∏‡πâ‡∏ô
        annual_div = dividends_df["Dividend"].sum()

        total_for_symbol = annual_div * quantity
        yield_percent = (annual_div / avg_price) * 100 if avg_price > 0 else 0

        dividend_data.append({
            "‡∏´‡∏∏‡πâ‡∏ô": symbol,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": quantity,
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": round(float(avg_price), 2),
            "‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•/‡∏´‡∏∏‡πâ‡∏ô": round(float(annual_div), 2),
            "‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏ô‡∏ú‡∏•": round(float(total_for_symbol), 2),
            "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≠‡∏õ‡∏µ (%)": round(float(yield_percent), 2),
        })

        total_div += total_for_symbol

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    if dividend_data:
        df = pd.DataFrame(dividend_data)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ
    fig = plot_dividend_progress(total_div, goal_amount)
    st.plotly_chart(fig, use_container_width=True)
    st.markdown(f"üí∞ ‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **{total_div:,.2f} ‡∏ö‡∏≤‡∏ó** / ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {goal_amount:,.0f} ‡∏ö‡∏≤‡∏ó "
                f"({(total_div/goal_amount*100 if goal_amount else 0):.2f}%)")
