# modules/portfolio.py

import streamlit as st
import pandas as pd
from database import db
from modules.stock_data import get_price, get_dividends
from visualization import plot_portfolio_pie
from config import MONTH_LABELS

def show_portfolio():
    st.title("üìä ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô")

    # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï
    raw_data = db.get_portfolio()
    if not raw_data:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
        return

    df = pd.DataFrame(raw_data, columns=[
        "symbol", "group", "sector", "avg_price", "quantity", "total_cost"
    ])
    df["latest_price"] = df["symbol"].apply(get_price)
    df["market_value"] = df["latest_price"] * df["quantity"]
    df["gain_loss"] = df["market_value"] - df["total_cost"]

    # ‡πÅ‡∏™‡∏î‡∏á Pie Chart
    st.plotly_chart(plot_portfolio_pie(df), use_container_width=True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏´‡∏∏‡πâ‡∏ô
    for idx, row in df.iterrows():
        col1, col2 = st.columns([5, 1])
        with col1:
            st.markdown(f"**{row['symbol']}** | {row['quantity']} ‡∏´‡∏∏‡πâ‡∏ô | ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {row['avg_price']:.2f} ‡∏ö‡∏≤‡∏ó | ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {row['gain_loss']:.2f}")
        with col2:
            if st.button("üóëÔ∏è ‡∏•‡∏ö", key=f"delete_{row['symbol']}"):
                db.delete_stock(row['symbol'])
                st.experimental_rerun()

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    st.markdown("### üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏≠‡∏£‡πå‡∏ï")
    st.dataframe(df[[
        "symbol", "avg_price", "latest_price", "quantity", "market_value", "gain_loss"
    ]].style.format({"avg_price": ".2f", "latest_price": ".2f", "market_value": ".2f", "gain_loss": ".2f"}))

    # üîπ ‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï
    st.subheader("üìÖ ‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï")
    all_div = []
    for symbol in df["symbol"]:
        div = get_dividends(symbol)
        if not div.empty:
            div["symbol"] = symbol
            all_div.append(div)

    if all_div:
        div_df = pd.concat(all_div)
        div_df = div_df[["symbol", "Date", "Dividend"]].sort_values(by="Date", ascending=False)
        st.dataframe(div_df)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï")
